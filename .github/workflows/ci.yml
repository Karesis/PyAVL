# 文件路径: .github/workflows/ci.yml (修正版)

name: PyAVL CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_test:
    name: Build and Test on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 步骤修改 1: 使用 pipx 安装 uv，这是一种更稳健的跨平台方式
      - name: Install uv via pipx
        run: |
          pip install pipx
          pipx install uv

      # 步骤新增 2: 创建虚拟环境，这是修复错误的关键！
      - name: Create virtual environment
        run: uv venv

      # 步骤新增 3: “激活”虚拟环境
      # 在CI中，最佳实践不是运行 activate 脚本，而是将 venv 的可执行文件目录添加到 PATH 中
      - name: Activate virtual environment (add to PATH)
        shell: bash
        run: |
          # 根据操作系统确定 Scripts/bin 目录
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "$PWD/.venv/Scripts" >> $GITHUB_PATH
          else
            echo "$PWD/.venv/bin" >> $GITHUB_PATH
          fi
      
      # 第四步：现在可以安全地安装依赖了
      - name: Install dependencies
        run: uv pip install -e .[dev]

      # 第五步：编译 C 扩展
      - name: Build C extension inplace
        run: python setup.py build_ext --inplace

      # 第六步：运行测试
      - name: Run tests with pytest
        run: pytest -v